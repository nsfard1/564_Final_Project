function filteredTraffic = importCSVFile(filename, startRow, endRow)
% Usage: StartRow and endRow are optional. The full file will be read if
%        they are omitted. 
%        This function returns all columns EXCEPT Sport, Dport, dTos,
%        SrcWin, DstWin, dHops, dTtl which were omitted because the
%        majority of the rows had either empty or unimportable values for
%        them
% THE REST OF THIS SCRIPT IS AUTOGENERATED BY MATLAB
%
%IMPORTFILE Import numeric data from a text file as a matrix.
%   FILTEREDTRAFFIC = IMPORTFILE(FILENAME) Reads data from text file
%   FILENAME for the default selection.
%
%   FILTEREDTRAFFIC = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data
%   from rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   filteredTraffic = importfile('filteredTraffic.csv', 2, 10883);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2018/05/08 16:28:55

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Format for each line of text:
%   column1: categorical (%C)
%	column2: categorical (%C)
%   column3: categorical (%C)
%	column6: categorical (%C)
%   column7: double (%f)
%	column11: double (%f)
%   column13: text (%q)
%	column14: text (%q)
%   column15: double (%f)
%	column17: double (%f)
%   column18: double (%f)
%	column19: double (%f)
%   column20: double (%f)
%	column21: double (%f)
%   column22: double (%f)
%	column23: double (%f)
%   column24: double (%f)
%	column25: double (%f)
%   column26: double (%f)
%	column27: double (%f)
%   column28: double (%f)
%	column29: double (%f)
%   column30: double (%f)
%	column31: double (%f)
%   column32: double (%f)
%	column33: categorical (%C)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%C%C%C%*q%*q%C%f%*q%*q%*q%f%*q%q%q%f%*q%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%C%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
textscan(fileID, '%[^\n\r]', startRow(1)-1, 'WhiteSpace', '', 'ReturnOnError', false);
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'TextType', 'string', 'EmptyValue', NaN, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    textscan(fileID, '%[^\n\r]', startRow(block)-1, 'WhiteSpace', '', 'ReturnOnError', false);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'TextType', 'string', 'EmptyValue', NaN, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
filteredTraffic = table(dataArray{1:end-1}, 'VariableNames', {'SrcAddr','DstAddr','Proto','State','sTos','sHops','StartTime','LastTime','sTtl','TcpRtt','SynAck','AckDat','SrcPkts','DstPkts','SrcBytes','DstBytes','SAppBytes','DAppBytes','Dur','TotPkts','TotBytes','TotAppByte','Rate','SrcRate','DstRate','Label'});

